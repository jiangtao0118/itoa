package com.wisdom.spark.streaming.service

import java.sql.Connection
import java.util

import com.wisdom.spark.common.ExecutorState
import com.wisdom.spark.common.bean.{PredResult, RelationAnalysis}
import com.wisdom.spark.common.util.{ConnPoolUtil2, SysConst}
import com.wisdom.spark.streaming.dao.{PredResultDao, RelationDao}
import com.wisdom.spark.streaming.tools.{Thread4CheckAlarm, Thread4SavePredResult, ThreadPools}
import org.apache.log4j.Logger

/**
  * Created by zhengz on 2017/1/3.
  * 预测结果处理业务逻辑service，主要负责将实时接收的数据进行模型预测完的结果数据和关联分析结果数据，解析为list，
  * 批量保存到预测结果表和关联分析表，并且针对预测结果进行告警判断过程，调用告警service，如果发生告警则保存数据库和写文件
  */
class SaveResultService extends Serializable {
  //  日志类
  val logger = Logger.getLogger(this.getClass)
  val predResultDao = new PredResultDao()
  val relationDao = new RelationDao()

  /**
    * 判断告警过程,如果需要告警，则保存至数据库或写文件到相关目录 针对指标预测告警
    *
    * resultTyp,writeTime,hostName,alarmTime,alarmInfo,indexName,predPeriod,confId,ruleId
    *
    * @param predResult 对象模式的预测信息，用来判断告警情况
    *
    *                   根据ruleId执行对应的判断方法
    */
  def saveResult(predResult: List[PredResult]): Unit = {
    logger.warn("************** 预测结果保存MYSQL *****************")
    //数据库连接
    var conn: Connection = null
    try {
      //从连接池中获取一个数据库连接
      conn = ConnPoolUtil2.getConn()

//      conn.setAutoCommit(false)
      //用于保存"成功"的预测结果的List
      predResultDao.saveBatchPredResult2(predResult,conn)

//      conn.setAutoCommit(true)
    } catch {
      case e: Exception => logger.error("**** 预测结果处理逻辑存在异常(告警、保存) ****" + e.printStackTrace())
    } finally {
      if (conn != null) {
        //释放数据库连接
        ConnPoolUtil2.releaseCon(conn)
      }
    }

  }

}
