package com.wisdom.spark.streaming.thread

import java.sql.{Connection, PreparedStatement}
import java.text.SimpleDateFormat
import java.util
import java.util.{Calendar, Date, Properties}

import com.wisdom.spark.common.util.{ConnPoolUtil2, ItoaPropertyUtil, SparkContextUtil}
import com.wisdom.spark.streaming.bean.AlarmConfiguration
import com.wisdom.spark.streaming.dao.AlarmDao
import org.apache.log4j.Logger
import org.apache.spark.sql.hive.HiveContext

/**
  * Created by wisdom on 2017/6/9.
  */
object UpdateItmThreshold2 {

  @transient
  //日志实例
  val logger = Logger.getLogger(this.getClass)
  //获取数据库连接
  //val conn = ConnPoolUtil2.getConn()
  //  新建AlarmDao对象
  val alarmDao = new AlarmDao
  //  配置文件
  //val props = ItoaPropertyUtil.getProperties()

  def main(args: Array[String]) {
    //公共方法：获取SparkContext
    val sc = SparkContextUtil.getInstance()
    //    新建HiveContext对象
    val hiveCtx = new HiveContext(sc)
    val props = ItoaPropertyUtil.getProperties()
    val conn = ConnPoolUtil2.getConn()
    //更新网络动态阈值
    updateItmThreshold(hiveCtx,conn,props)
    //    更新指标规则配置关系表
    alarmDao.updateRItmCrel(conn)
    //释放连接
    ConnPoolUtil2.releaseCon(conn)
    //    停止程序
    sc.stop()
  }


  //更新网络动态阈值
  private def updateItmThreshold(hiveCtx: HiveContext,conn:Connection,props:Properties): Unit = {
    //查询Hive，统计出节点、告警时刻、指标名和指标值
    val time = new Date()
    val lastoccurtime = UpdateItmThreshold2.getlastmonthtime(time)
    val simpleDateFormatORG = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.S")
    val courencetime = simpleDateFormatORG.format(time)
    val list = queryhostname(conn)
    //    sql:查询出目标时间区间内的所有数据，并做时间戳转换（unixtime转换成hh:m0/hh:mm5的格式）
    val tempTable1 = hiveCtx.sql("select concat(substring(dtimestamp,12,4),case when substring(dtimestamp,16,1) < 5  then '0' else '5' end) as alarmTime," +
      " node_name,jvm_memory_used_kb from hist_itm.application_server where length(trim(jvm_memory_used_kb)) > 0 and dtimestamp < '" + courencetime + "' and dtimestamp >  '" + lastoccurtime + "'")
    //    注册临时表
    tempTable1.registerTempTable("tempItmAppperf")
    logger.warn("~~~~~~~~~~~~~~~~~~~~~~~~hist_itm.application_server注册临时表结束~~~~~~~~~~~~~~~~~~~~~·")
    //    sql:按照字段node,alarmTime,alertgroup,devvendor进行分组，将同一alarmTime的mibvalue进行列转行，用逗号分隔
    val threshold_table1 = hiveCtx.sql("select node_name,alarmTime,concat_ws(',',collect_list(concat(jvm_memory_used_kb))) as jvm_memory_used_kb " +
      " from tempItmAppperf  group by node_name,alarmTime")

    //缓存RDD
    threshold_table1.persist()
    logger.warn("~~~~~~~~~~~~~~~~~~~~~~RDD缓存结束~~~~~~~~~~~~~~~~~~~~~~~~")
    //    计算DataFrame每一行数据中mibvalue的平均值和方差
//    val alarmRu1 = threshold_table1.map(row => {
//      list.contains(row.getString(0))
//      row})
//    val alarmRulesDF1 = alarmRu1.map(row => {
        val alarmRu1 =threshold_table1.map(row => {
        row.getString(2).length > 0
        row })

        val alarmRulesDF1 =alarmRu1.filter(row => list.contains(row.getString(0))).map(row => {
      //      主机名
        val hostname = row.getString(0)
        //统计字符串形式的数组，求出平均值和方差
        val mibvalues = row.getString(2).split(",").map(a => a.toDouble)
        //      预测值阈值：mibvalues平均值
        val mid_threshold = UpdateItmThreshold2.ARRstdev(mibvalues).avg
          //      预测值下限阈值：mibvalues平均值-3倍方差
          var low_threshold = mid_threshold - 3 * (UpdateItmThreshold2.ARRstdev(mibvalues).stdev)
          if (low_threshold < 0) low_threshold = 0
          //      预测值上限阈值：mibvalues平均值+3倍方差
          val high_threshold = mid_threshold + 3 * (UpdateItmThreshold2.ARRstdev(mibvalues).stdev)
        //      时刻00:05
        val alarmTime = row.getString(1)
        //      指标名
        val predIndexName = "jvm_memory_used_kb"
        //      告警信息描述
        val confDesc = "网络指标" + predIndexName + "告警阈值配置"
        //      计算结果封装AlarmConfiguration
        val ac: AlarmConfiguration = new AlarmConfiguration()
        ac.setSysName("Application_Server")
        ac.setHostName(hostname)
        ac.setIndexTyp("00")
        ac.setAlarmTime(alarmTime)
        ac.setPredIndexName(predIndexName)
        ac.setConfDesc(confDesc)
        ac.setConfMidValue(mid_threshold.toString)
        ac.setConfLowValue(low_threshold.toString)
        ac.setConfHighValue(high_threshold.toString)
        ac

    })
    //删除t_alarm_configuration中sysName="reporter_status"的所有条目
    alarmDao.delAlarmConf("Application_Server", conn)




    val tempTable2 = hiveCtx.sql("select concat(substring(dtimestamp,12,4),case when substring(dtimestamp,16,1) < 5 then '0' else '5' end) as alarmTime," +
      "substring(system_name,1,instr(system_name,':')-1) as system_name,idle_cpu from hist_itm.system where length(trim(idle_cpu)) > 0 and dtimestamp < '" + courencetime + "' and dtimestamp >  '" + lastoccurtime + "'")
    //    注册临时表
    tempTable2.registerTempTable("tempItmSysperf")
    logger.warn("~~~~~~~~~~~~~~~~~~~~~~~~hist_itm.system注册临时表结束~~~~~~~~~~~~~~~~~~~~~·")
    //    sql:按照字段node,alarmTime,alertgroup,devvendor进行分组，将同一alarmTime的mibvalue进行列转行，用逗号分隔
    val threshold_table2 = hiveCtx.sql("select system_name,alarmTime,concat_ws(',',collect_list(concat(idle_cpu))) as idle_cpu " +
      " from tempItmSysperf  group by system_name,alarmTime")

    //缓存RDD
    threshold_table2.persist()
    logger.warn("~~~~~~~~~~~~~~~~~~~~~~RDD缓存结束~~~~~~~~~~~~~~~~~~~~~~~~")
    //    计算DataFrame每一行数据中mibvalue的平均值和方差
    val alarmRu2 =threshold_table2.map(row => {row.getString(2).length > 0
      row})
    val alarmRulesDF2 =alarmRu2.filter(row => list.contains(row.getString(0))).map(row => {
      //统计字符串形式的数组，求出平均值和方差
      val hostname = row.getString(0)
        val mibvalues = row.getString(2).split(",").map(a => a.toDouble)
        //      预测值阈值：mibvalues平均值
        var mid_threshold = UpdateItmThreshold2.ARRstdev(mibvalues).avg
        //      预测值下限阈值：mibvalues平均值-3倍方差
        var low_threshold = mid_threshold - 3 * (UpdateItmThreshold2.ARRstdev(mibvalues).stdev)
       if (low_threshold < 0) low_threshold = 0
        //      预测值上限阈值：mibvalues平均值+3倍方差
        var high_threshold = mid_threshold + 3 * (UpdateItmThreshold2.ARRstdev(mibvalues).stdev)
        if (high_threshold > 100) high_threshold =100
        if (mid_threshold > 100) mid_threshold =100
        //      时刻00:05
        val alarmTime = row.getString(1)
        //      指标名
        val predIndexName = "IDLE_CPU"
        //      告警信息描述
        val confDesc = "网络指标" + predIndexName + "告警阈值配置"
        //      计算结果封装AlarmConfiguration
        val ac: AlarmConfiguration = new AlarmConfiguration()
        ac.setSysName("System")
        ac.setHostName(hostname)
        ac.setIndexTyp("00")
        ac.setAlarmTime(alarmTime)
        ac.setPredIndexName(predIndexName)
        ac.setConfDesc(confDesc)
        ac.setConfMidValue(mid_threshold.toString)
        ac.setConfLowValue(low_threshold.toString)
        ac.setConfHighValue(high_threshold.toString)
        ac
    })

    alarmDao.delAlarmConf("System", conn)





    val tempTable3 = hiveCtx.sql("select concat(substring(dtimestamp,12,4),case when substring(dtimestamp,16,1) < 5 then '0' else '5' end) as alarmTime," +
      " substring(system_name,1,instr(system_name,':')-1) as system_name,avail_real_mem_pct from hist_itm.unix_memory where length(trim(avail_real_mem_pct)) > 0 and dtimestamp < '" + courencetime + "' and dtimestamp >  '" + lastoccurtime + "'")
    //    注册临时表
    tempTable3.registerTempTable("tempItmUnixreperf")
    logger.warn("~~~~~~~~~~~~~~~~~~~~~~~~hist_itm.unix_memery注册临时表结束~~~~~~~~~~~~~~~~~~~~~·")
    //    sql:按照字段node,alarmTime,alertgroup,devvendor进行分组，将同一alarmTime的mibvalue进行列转行，用逗号分隔
    val threshold_table3 = hiveCtx.sql("select system_name,alarmTime,concat_ws(',',collect_list(concat(avail_real_mem_pct))) as avail_real_mem_pct " +
      " from tempItmUnixreperf  group by system_name,alarmTime")

    //缓存RDD
    threshold_table3.persist()
    logger.warn("~~~~~~~~~~~~~~~~~~~~~~RDD缓存结束~~~~~~~~~~~~~~~~~~~~~~~~")
    //将Dataframe类型数据转成RDD类型
    val alarmRu3 =threshold_table3.map(row => {row.getString(2).length > 0
      row})

    //将不存在List集合中的主机去掉
    val alarmRulesDF3 =alarmRu3.filter(row => list.contains(row.getString(0))).map(row => {
      //统计字符串形式的数组，求出平均值和方差
        val hostname = row.getString(0)
        val mibvalues = row.getString(2).split(",").map(a => a.toDouble)
        //      预测值阈值：mibvalues平均值
        var mid_threshold = UpdateItmThreshold2.ARRstdev(mibvalues).avg
      //      预测值下限阈值：mibvalues平均值-3倍方差
      var low_threshold = mid_threshold - 3 * (UpdateItmThreshold2.ARRstdev(mibvalues).stdev)
      if (low_threshold < 0) low_threshold = 0
      //      预测值上限阈值：mibvalues平均值+3倍方差
      var high_threshold = mid_threshold + 3 * (UpdateItmThreshold2.ARRstdev(mibvalues).stdev)
      if (high_threshold > 100) high_threshold =100
      if (mid_threshold > 100) mid_threshold =100
        //      时刻00:05
        val alarmTime = row.getString(1)
        //      指标名
        val predIndexName = "Avail_Real_Mem_Pct"
        //      告警信息描述
        val confDesc = "网络指标" + predIndexName + "告警阈值配置"
        //      计算结果封装AlarmConfiguration
        val ac: AlarmConfiguration = new AlarmConfiguration()
        ac.setSysName("Unix_Memory")
        ac.setHostName(hostname)
        ac.setIndexTyp("00")
        ac.setAlarmTime(alarmTime)
        ac.setPredIndexName(predIndexName)
        ac.setConfDesc(confDesc)
        ac.setConfMidValue(mid_threshold.toString)
        ac.setConfLowValue(low_threshold.toString)
        ac.setConfHighValue(high_threshold.toString)
        ac

    })
    //    删除t_alarm_configuration中sysName="Unix_Memory"的所有条目
    //alarmDao.delAlarmConf("Unix_Memory", conn)


    val tempTable4 = hiveCtx.sql("select concat(substring(dtimestamp,12,4),case when substring(dtimestamp,16,1) < 5 then '0' else '5' end) as alarmTime," +
      " substring(system_name,1,instr(system_name,':')-1) as system_name,avail_swap_space_pct from hist_itm.unix_memory where length(trim(avail_swap_space_pct)) > 0 and dtimestamp < '" + courencetime + "' and dtimestamp > '" + lastoccurtime + "'")
    //    注册临时表
    tempTable4.registerTempTable("tempItmUnixswperf")
    logger.warn("~~~~~~~~~~~~~~~~~~~~~~~~hist_itm.unix_memery注册临时表结束~~~~~~~~~~~~~~~~~~~~~·")
    //    sql:按照字段node,alarmTime,alertgroup,devvendor进行分组，将同一alarmTime的mibvalue进行列转行，用逗号分隔
    val threshold_table4 = hiveCtx.sql("select system_name,alarmTime,concat_ws(',',collect_list(concat(avail_swap_space_pct))) as avail_swap_space_pct " +
      " from tempItmUnixswperf  group by system_name,alarmTime")

    //缓存RDD
    threshold_table4.persist()
    logger.warn("~~~~~~~~~~~~~~~~~~~~~~RDD缓存结束~~~~~~~~~~~~~~~~~~~~~~~~")
    //将Dataframe类型数据转成RDD类型
    val alarmRu4 =threshold_table4.map(row => {row.getString(2).length > 0
      row})
    //将不存在List集合中的主机去掉
    val alarmRulesDF4 =alarmRu4.filter(row => list.contains(row.getString(0))).map(row => {
        val hostname = row.getString(0)
        val mibvalues = row.getString(2).split(",").map(a => a.toDouble)
        //      预测值阈值：mibvalues平均值
        var mid_threshold = UpdateItmThreshold2.ARRstdev(mibvalues).avg
      //      预测值下限阈值：mibvalues平均值-3倍方差
        var low_threshold = mid_threshold - 3 * (UpdateItmThreshold2.ARRstdev(mibvalues).stdev)
        if (low_threshold < 0) low_threshold = 0
      //      预测值上限阈值：mibvalues平均值+3倍方差
        var high_threshold = mid_threshold + 3 * (UpdateItmThreshold2.ARRstdev(mibvalues).stdev)
        if (high_threshold > 100) high_threshold =100
        if (mid_threshold > 100) mid_threshold =100
        //      时刻00:05
        val alarmTime = row.getString(1)
        //      指标名
        val predIndexName = "Avail_Swap_Space_Pct"
        //      告警信息描述
        val confDesc = "网络指标" + predIndexName + "告警阈值配置"
        //      计算结果封装AlarmConfiguration
        val ac: AlarmConfiguration = new AlarmConfiguration()
        ac.setSysName("Unix_Memory")
        ac.setHostName(hostname)
        ac.setIndexTyp("00")
        ac.setAlarmTime(alarmTime)
        ac.setPredIndexName(predIndexName)
        ac.setConfDesc(confDesc)
        ac.setConfMidValue(mid_threshold.toString)
        ac.setConfLowValue(low_threshold.toString)
        ac.setConfHighValue(high_threshold.toString)
        ac

    })
    //    删除t_alarm_configuration中sysName="Unix_Memory"的所有条目
    alarmDao.delAlarmConf("Unix_Memory", conn)

    //union所有的RDD
    val alarmRulesDF = alarmRulesDF1.union(alarmRulesDF2).union(alarmRulesDF3).union(alarmRulesDF4)

    val partitions = props.getProperty("kafka.data.partitions").toInt
    //重分区，并收集所有的行转成List
    val fist = alarmRulesDF.repartition(partitions).collect().toList
    //将所有数据存到数据库
    alarmDao.saveAlarmConf(fist, conn)
  }


//  private def hostnameifexisttable (str : String,list :util.ArrayList[String]) : Boolean ={
//    var flag = false
//    if (list.contains(str))  flag = true
//    flag
//  }

  //查询数据库中所有的主机
  private  def queryhostname(conn:Connection) :util.ArrayList[String] ={
    var list :util.ArrayList[String] = new util.ArrayList[String]()
    var pst:PreparedStatement = null
    val sql = "select hostName from t_table_host_index group by hostName"
    pst = conn.prepareStatement(sql)
    val querylist = pst.executeQuery()
    while (querylist.next()) {
      val query = querylist.getString(1)
      list.add(query)
    }
    list
  }

  //获取当前时间的上一个月时间点
  private def getlastmonthtime(date:Date)  :String = {
    val simpleformat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.S")
    val cal = Calendar.getInstance()
    val time = cal.setTime(date)
    val lasttime= cal.add(Calendar.MONTH,-2)
    //val lasttime = cal.add(Calendar.DAY_OF_MONTH,-1)
    val finaltime = cal.getTime
    val st = simpleformat.format(finaltime)
    st
  }

  //求Double数组的平均值和标准差
  def ARRstdev(arrDbl: Array[Double]): statistic = {
    //        平均值
    val avg = arrDbl.sum / arrDbl.length
    //        方差
    var sum = 0.0
    for (i <- arrDbl) {
      sum += math.pow(i - avg, 2)
    }
    val stdev = math.sqrt(sum / (arrDbl.length - 1))
    //        返回值statistic（均值，方差）
    statistic(avg, stdev)
  }


  //  用于保存mibvalue均值方差的class
  case class statistic(avg: Double, stdev: Double)


}
